{"version":3,"sources":["types/SortType.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","ALL","filterReducer","arr","playload","initialTodos","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","map","id","completed","classNames","title","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","isError","setIsError","useEffect","loadUsers","a","userId","loadedUsers","email","name","href","App","currentTodoState","todosState","filterState","loadTodos","loadedTodos","actionsTodos","visibleTodos","useMemo","filteredTodos","toLowerCase","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5764e6a3.chunk.js","sourcesContent":["export enum SortType {\n  ALL = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { SortType } from '../types/SortType';\n\ntype SetQueryAction = {\n  type: 'query/SET_QUERY',\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'status/SET_STATUS',\n  payload: SortType,\n};\n\ntype SetClearAction = {\n  type: 'status/SET_CLEAR',\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: SortType): SetStatusAction => ({\n  type: 'status/SET_STATUS',\n  payload: status,\n});\n\nconst setClear = (): SetClearAction => ({\n  type: 'status/SET_CLEAR',\n});\n\nexport const actions = { setQuery, setStatus, setClear };\n\ntype Action = SetQueryAction | SetStatusAction | SetClearAction;\n\nexport interface FilterState {\n  query: string;\n  status: SortType;\n}\n\nconst initialState: FilterState = {\n  query: '',\n  status: SortType.ALL,\n};\n\nconst filterReducer = (state: FilterState = initialState, action: Action) => {\n  switch (action.type) {\n    case 'query/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'status/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    case 'status/SET_CLEAR':\n      return { ...state, query: '' };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todos/SET_TODO',\n  playload: Todo[],\n};\n\nconst setTodo = (arr: Todo[]): SetTodoAction => ({\n  type: 'todos/SET_TODO',\n  playload: arr,\n});\n\nexport const actions = { setTodo };\n\nconst initialTodos: Todo[] = [];\n\ntype Action = SetTodoAction;\n\nconst todosReducer = (\n  state = initialTodos,\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET_TODO':\n      return [...action.playload, ...state];\n    default:\n      return [...state];\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <>\n      {!todos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria.\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              key={todo.id}\n              data-cy=\"todo\"\n            >\n              <td className=\"is-vcentered\">\n                {todo.id}\n              </td>\n              <td className=\"is-vcentered\">\n                {todo.completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', {\n                      'fa-eye-slash': currentTodo?.id === todo.id,\n                      'fa-eye': currentTodo?.id !== todo.id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { SortType } from '../../types/SortType';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as SortType));\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleClearInput = () => {\n    dispatch(filterActions.setClear());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value={SortType.ALL}>All</option>\n            <option value={SortType.ACTIVE}>Active</option>\n            <option value={SortType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                aria-label=\"delete\"\n                onClick={handleClearInput}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      try {\n        if (currentTodo) {\n          const loadedUsers = await getUser(currentTodo?.userId);\n\n          setUser(loadedUsers);\n        }\n      } catch (error) {\n        if (error) {\n          setIsError(true);\n        }\n\n        setIsLoading(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUsers();\n  }, [currentTodo]);\n\n  const { id, title, completed } = currentTodo || {};\n  const { email, name } = user || {};\n\n  const handleCloseModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"delete\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              {isError\n                ? (\n                  <p className=\"notification is-warning\">\n                    User can not be loaded.\n                  </p>\n                ) : (\n                  <a href={`mailto:${email}`}>{name}</a>\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as actionsTodos } from './features/todos';\nimport { SortType } from './types/SortType';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodoState = useAppSelector((state) => state.currentTodo);\n  const todosState = useAppSelector((state) => state.todos);\n  const filterState = useAppSelector((state) => state.filter);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      try {\n        const loadedTodos = await getTodos();\n\n        dispatch(actionsTodos.setTodo(loadedTodos));\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    let filteredTodos = [...todosState];\n\n    switch (filterState.status) {\n      case SortType.ALL:\n        filteredTodos = todosState;\n        break;\n\n      case SortType.ACTIVE:\n        filteredTodos = todosState.filter(todo => !todo.completed);\n        break;\n\n      case SortType.COMPLETED:\n        filteredTodos = todosState.filter(todo => todo.completed);\n        break;\n\n      default:\n        filteredTodos = todosState;\n        break;\n    }\n\n    return filteredTodos.filter(todo => todo.title.toLowerCase().includes(filterState.query.toLowerCase()));\n  }, [todosState, filterState]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList todos={visibleTodos} />}\n\n              {isError && (\n                <p className=\"notification is-warning\">\n                  Todos can not be loaded from the server.\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodoState && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}